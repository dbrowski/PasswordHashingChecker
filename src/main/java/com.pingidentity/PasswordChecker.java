package com.pingidentity;

import com.google.common.primitives.Bytes;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.*;

public class PasswordChecker {
    // Map of the Java expected name to the PingOne for Customers Name.
    public static final Map<String, String> ALGORITHM_NAME_CONVERSION = new HashMap<>();

    // Accepted schemes
    static {
        ALGORITHM_NAME_CONVERSION.put("SSHA", "SHA-1");
        ALGORITHM_NAME_CONVERSION.put("SSHA256", "SHA-256");
        ALGORITHM_NAME_CONVERSION.put("SSHA384", "SHA-384");
        ALGORITHM_NAME_CONVERSION.put("SSHA512", "SHA-512");
    }

    public static void main(String[] args) throws NoSuchAlgorithmException {

        final Scanner sc = new Scanner(System.in);
        final SecureRandom rng = new SecureRandom();
        String scheme = null;
        MessageDigest messageDigest = null;
        final int NUMBER_OF_TRIES = 3;
        int tryNumber = 0;

        while (tryNumber < NUMBER_OF_TRIES) {
            // Prompt for password digest scheme. List of supported schemes are printed as a list.
            System.out.println("Password digest schemes (" + ALGORITHM_NAME_CONVERSION.keySet().toString() + "): ");
            scheme = sc.nextLine().trim().toUpperCase();

            try {
                messageDigest = getDigest(scheme);
            } catch (IllegalArgumentException | NoSuchAlgorithmException e) {
                System.out.println("I couldn't match the scheme to one of the available ones. Please choose one from the list and try again.");
                tryNumber++;
            }

            if(messageDigest != null) {
                break;
            }
        }

        // If we haven't successfully gotten the message digest, exit the program with an error message.
        if (messageDigest == null) {
            System.err.println("Failed to get a proper digest scheme " + NUMBER_OF_TRIES + " times. Something's not right.");
            System.exit(-1);
        }

        // Prompt for salt. Random salt can be generated if none entered in the debug section below.
        System.out.println("Enter salt (Base64 String Encoded): ");
        final String salt = sc.nextLine().trim();
        byte[] saltBytes = new byte[8];

        /*
         * DEBUG
         */
//        // If you want a random salt generated, uncomment this section.
//        // If we didn't receive a salt, then generate a random 8 byte salt.
//        if (salt.length() <= 0) {
//            // Random salt generation using Java's SecureRandom.
//            rng.nextBytes(saltBytes);
//
//            //  Debug
//            System.out.println("Random salt generated bytes: " + Arrays.toString(saltBytes));
//            System.out.println("Random salt generated Base64 encoded String: " + Base64.getEncoder().encodeToString(saltBytes));
//        } else {
//            saltBytes = Base64.getDecoder().decode(salt);
//        }
        /*
         * DEBUG
         */

        // Prompt for the password to hash.
        System.out.println("Enter cleartext-password: ");
        final String clearTextPassword = sc.nextLine().trim();
        final byte[] clearTextPasswordBytes = clearTextPassword.getBytes();

        // Output hashed password
        System.out.println(hashPassword(clearTextPasswordBytes, saltBytes, scheme, messageDigest));
    }

    /*
     * Grabs the MessageDigest with the chosen password digest scheme that we'll use to do the hashing.
     */
    private static MessageDigest getDigest(final String scheme) throws IllegalArgumentException, NoSuchAlgorithmException {
        MessageDigest digest = null;
        String javaScheme = null;
        if (ALGORITHM_NAME_CONVERSION.containsKey(scheme)) {
            javaScheme = ALGORITHM_NAME_CONVERSION.get(scheme);
        } else {
            throw new IllegalArgumentException("Failed to match scheme to one of the supported ones.");
        }
        digest = MessageDigest.getInstance(javaScheme);

        return digest;
    }

    private static String hashPassword(final byte[] cleartextPassword, final byte[] salt, final String scheme, final MessageDigest messageDigest) throws NoSuchAlgorithmException {
        MessageDigest digest = getDigest(scheme);

        //
        // 1. Concatenate cleartext-password and salt
        //
        byte[] passwordAndSalt = Bytes.concat(cleartextPassword, salt);

        //
        // 2. Hash the password and salt concatenation.
        //
        byte[] passwordHash = digest.digest(passwordAndSalt);

        //
        // 3. Concatenate password-hash and salt.
        //
        byte[] hashAndSalt = Bytes.concat(passwordHash, salt);

        //
        // 4. Base64 encode hash and salt. Return Base64 encoded String for reliable String results.
        // Just using new String(byte[]) doesn't reliably convert back to original bytes due to
        // limited charset.
        //
        String b64HashAndSalt = Base64.getEncoder().encodeToString(hashAndSalt);

        //
        // 5. Add the scheme as a prefix inside of "{}".
        //
        String userPasswordValue = "{" + scheme + "}" + b64HashAndSalt;

        return userPasswordValue;
    }
}
